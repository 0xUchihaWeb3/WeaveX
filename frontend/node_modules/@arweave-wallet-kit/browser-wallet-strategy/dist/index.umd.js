(function(e,n){typeof exports=="object"&&typeof module<"u"?module.exports=n():typeof define=="function"&&define.amd?define(n):(e=typeof globalThis<"u"?globalThis:e||self,e["@arweave-wallet-kit/browser-wallet-strategy"]=n())})(this,function(){"use strict";var d=Object.defineProperty;var l=(e,n,i)=>n in e?d(e,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[n]=i;var s=(e,n,i)=>(l(e,typeof n!="symbol"?n+"":n,i),i);async function e(i,t=[]){return window!=null&&window.arweaveWallet?await window.arweaveWallet[i](...t):new Promise((a,r)=>window.addEventListener("arweaveWalletLoaded",async()=>{try{a(await window.arweaveWallet[i](...t))}catch(w){r(w)}}))}class n{constructor(){s(this,"id","browserwallet");s(this,"name","Browser Wallet");s(this,"description","Any browser wallet with an injected API");s(this,"theme","121,212,131");s(this,"logo","KKiSlNKc5K59MXzUPz5qjtCLsl6_ckjAOg9MyAzaUs0")}async isAvailable(){return typeof window>"u"||!window?(console.error(`[Arweave Wallet Kit] "${this.id}" strategy is unavailable. Window is undefined`),!1):window.arweaveWallet?!0:new Promise(t=>{const a=()=>t(!0);window.addEventListener("arweaveWalletLoaded",a),setTimeout(()=>{window.removeEventListener("arweaveWalletLoaded",a),window.arweaveWallet||console.error(`[Arweave Wallet Kit] "${this.id}" strategy is unavailable. window.arweaveWallet is undefined`),t(!!window.arweaveWallet)},7e3)})}async sync(){}async connect(t,a,r){return await e("connect",[t,a,r])}async disconnect(){return await e("disconnect")}async getActiveAddress(){return await e("getActiveAddress")}async getAllAddresses(){return await e("getAllAddresses")}async getPermissions(){return await e("getPermissions")}async getWalletNames(){return await e("getWalletNames")}async sign(t,a){const r=await e("sign",[t,a]);t.setSignature({id:r.id,owner:r.owner,reward:r.reward,tags:r.tags,signature:r.signature})}async encrypt(t,a){return await e("encrypt",[t,a])}async decrypt(t,a){return await e("decrypt",[t,a])}async getArweaveConfig(){return await e("getArweaveConfig")}async signature(t,a){return await e("signature",[t,a])}async getActivePublicKey(){return await e("getActivePublicKey")}async dispatch(t){return await e("dispatch",[t])}addAddressEvent(t){const a=r=>t(r.detail.address);return addEventListener("walletSwitch",a),a}removeAddressEvent(t){removeEventListener("walletSwitch",t)}}return n});
